// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MetaType {
  INT
  BOOLEAN
  STRING
}

model Store {
  id                    String          @id @default(uuid())
  email                 String          @unique
  password              String
  name                  String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  Customer              Customer[]
  CustomerCustomFields  CustomerCustomFields[]
  Product               Product[]
  ProductCustomFields   ProductCustomFields[]
  Order                 Order[]
  OrderCustomFields     OrderCustomFields[]
}

model Customer {
  id                        String                  @id @default(uuid())
  name                      String
  email                     String                  @unique
  password                  String
  store                     String
  Store                     Store                   @relation(fields: [store], references: [id])
  Order                     Order[]
  CustomerCustomFieldsData  CustomerCustomFieldsData[]
}

model CustomerCustomFields {
  id                        String                      @id @default(uuid())
  type                      MetaType
  key                       String
  required                  Boolean
  store                     String
  Store                     Store                       @relation(fields: [store], references: [id])
  CustomerCustomFieldsData  CustomerCustomFieldsData[]
}

model CustomerCustomFieldsData {
  id                    String                  @id @default(uuid())
  customFieldsId        String
  CustomerCustomFields  CustomerCustomFields    @relation(fields: [customFieldsId], references: [id])
  customerId            String
  Customer              Customer                @relation(fields: [customerId], references: [id])
  value                 String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Product {
  id                        String                      @id @default(uuid())
  name                      String
  price                     Int
  categories                String[]
  store                     String
  Store                     Store                       @relation(fields: [store], references: [id])
  ProductCustomFieldsData   ProductCustomFieldsData[]
}

model ProductCustomFields {
  id                        String                      @id @default(uuid())
  type                      MetaType
  key                       String
  value                     String?
  required                  Boolean
  store                     String
  Store                     Store                       @relation(fields: [store], references: [id])
  ProductCustomFieldsData   ProductCustomFieldsData[]
}

model ProductCustomFieldsData {
  id                    String                  @id @default(uuid())
  value                 String
  productCustomFieldId  String
  ProductCustomFields   ProductCustomFields     @relation(fields: [productCustomFieldId], references: [id])
  productId             String
  product               Product                 @relation(fields: [productId], references: [id])
}

model Order {
  id                    String                  @id @default(uuid())
  status                String
  customer              String
  Customer              Customer                @relation(fields: [customer], references: [id])
  products              String[]
  price                 Int
  store                 String
  Store                 Store                   @relation(fields: [store], references: [id])
  OrderCustomFieldsData OrderCustomFieldsData[]
}

model OrderCustomFields {
  id                    String                  @id @default(uuid())
  type                  MetaType
  key                   String
  required              Boolean
  store                 String
  Store                 Store                   @relation(fields: [store], references: [id])
  OrderCustomFieldsData OrderCustomFieldsData[]
}

model OrderCustomFieldsData {
  id                        String              @id @default(uuid())
  value                     String
  orderCustomFieldId        String
  OrderCustomFields         OrderCustomFields   @relation(fields: [orderCustomFieldId], references: [id])
  orderId                   String
  Order                     Order               @relation(fields: [orderId], references: [id])
}
